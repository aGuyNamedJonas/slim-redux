{"version":3,"file":null,"sources":["../src/util.js","../src/createSlimReduxStore.js","../src/changeTrigger.js","../src/asyncChangeTrigger.js","../src/notifyingSelector.js","../src/calculation.js","../src/subscription.js"],"sourcesContent":["import intersection from 'lodash.intersection';\n\nexport const error = (location, msg) => {\n  throw new Error(`*** Error in ${location}: ${msg}`)\n}\n\n/*\n  Functions to determine the type of something\n  Pattern stolen from here: http://tobyho.com/2011/01/28/checking-types-in-javascript/\n*/\nexport const getType = whatever => (whatever).constructor;\nexport const isObject = obj => (obj).constructor === Object;\nexport const isArray = arr => (arr).constructor === Array;\nexport const isString = str => (str).constructor === String;\nexport const isFunction = func => typeof(func) == 'function'; // Taken from: https://jsperf.com/alternative-isfunction-implementations/4\nexport const isBoolean = binary => (binary).constructor === Boolean;\nexport const isSet = smthg => (smthg !== undefined && smthg !== null);\nexport const isEmptyString = str => (str.replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '') === ''); // Taken from: https://stackoverflow.com/questions/3000649/trim-spaces-from-start-and-end-of-string\nexport const isEmptyObject = obj => (Object.keys(obj).length === 0);\nexport const isSlimReduxStore = obj => (obj.slimReduxOptions);\n\n/*\n  Function which returns an array with the arguments of a function\n  Stolen from: http://stackoverflow.com/questions/1007981/how-to-get-function-parameter-names-values-dynamically-from-javascript\n*/\nconst STRIP_COMMENTS = /(\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/)|(\\s*=[^,\\)]*(('(?:\\\\'|[^'\\r\\n])*')|(\"(?:\\\\\"|[^\"\\r\\n])*\"))|(\\s*=[^,\\)]*))/mg,\n      ARGUMENT_NAMES = /([^\\s,]+)/g;\n\nexport const getFuncParamNames = (func) => {\n  var fnStr = func.toString().replace(STRIP_COMMENTS, '');\n  var result = fnStr.slice(fnStr.indexOf('(')+1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);\n  if(result === null)\n     result = [];\n  return result;\n}\n\n/*\n  Validates a subscription string\n*/\n\nexport const isSubscriptionStrValid = (str, state) => {\n  const subStringParts = str.split('.');\n  var statePointer = state;\n\n  // Check whether or not first part is \"store\"\n  if(subStringParts[0] !== 'state')\n    return false;\n\n  for(var i=1; i < subStringParts.length; i++){\n    const nextPart = subStringParts[i];\n\n    if(!(statePointer.hasOwnProperty(nextPart)))\n      return false;\n\n    statePointer = statePointer[nextPart];\n  }\n\n  return true;\n}\n\n/*\n  Checks whether two arrays contain any duplicates, or not\n*/\nexport const isDuplicateFree = (a, b) => (intersection(a, b).length === 0);\n","import { createStore } from 'redux';\nimport { error as _err, getType, isObject, isFunction, isBoolean } from './util';\nimport reduceReducers from 'reduce-reducers';\n\nexport function createSlimReduxStore(initialState, options) {\n  const error = msg => _err('createSlimReduxStore()', msg);\n  global.window = global;\n\n  /*\n    Set default values\n  */\n  const defaultReducer        = state => state,\n        registerChangeTrigger = () => { error(`It's not neccessary anymore to register change triggers. Please see https://github.com/aGuyNamedJonas/slim-redux/blob/master/README.md#api-reference for details.`) };\n\n  // Default values\n  var rootReducer = defaultReducer,\n      middleware  = undefined,\n      slimReduxOptions = {\n        disableActionDispatch : false,\n        disableGlobalStore    : false,\n      },\n      slimReduxChangeTriggers = {};\n\n  /*\n    Check input parameters, this puppy should be fool proof :)\n  */\n  if(arguments.length > 2)\n    error(`Only 2 arguments allowed, ${arguments.length} given: \\n ${JSON.stringify(arguments, null, 2)}`);\n\n  if(initialState === undefined || initialState === null)\n    error(`initialState (first argument) cannot be null or undefined, got: ${initialState}`);\n\n  // Check the options argument\n  if(options !== undefined){\n    // Check whether it's an object\n    if(!isObject(options))\n      error(`options (second argument) needs to be an object. Instead got argument of type: ${getType(options)}`)\n\n    // Check option names and their values\n    const optionKeys = Object.keys(options);\n\n    for(var i=0; i<optionKeys.length; i++){\n      let name = optionKeys[i];\n      let option = options[name];\n\n      switch(name){\n        case 'rootReducer':\n          if(!isFunction(option))\n            error(`The value for the \"rootReducer\" option needs to be of Type \"Function\", got ${getType(option)}`)\n          else\n            rootReducer = options.rootReducer;\n          break;\n\n        case 'middleware':\n          if(!isFunction(option))\n            error(`The value for the \"middleware\" option needs to be of Type \"Function\", got ${getType(option)}`)\n          else\n            middleware = options.middleware;\n          break;\n\n        case 'disableActionDispatch':\n          if(!isBoolean(option))\n            error(`The value for the \"disableActionDispatch\" option needs to be of Type \"Boolean\", got ${getType(option)}`)\n          else\n            slimReduxOptions.disableActionDispatch = options.disableActionDispatch;\n          break;\n\n        case 'disableGlobalStore':\n          if(!isBoolean(option))\n            error(`The value for the \"disableGlobalStore\" option needs to be of Type \"Boolean\", got ${getType(option)}`)\n          else\n            slimReduxOptions.disableGlobalStore = options.disableGlobalStore;\n          break;\n\n        default:\n          error(`Unknown option: \"${name}\"`);\n      }\n    }\n  }\n\n  /*\n    Create the redux store, inject the slim-redux reducer and the slim-redux functionality into it\n  */\n  var store = createStore(rootReducer, initialState, middleware);\n\n  // Inject all the good stuff into the store\n  store.registerChangeTrigger   = registerChangeTrigger;\n  store.slimReduxOptions        = slimReduxOptions;\n  store.slimReduxChangeTriggers = slimReduxChangeTriggers;\n\n  /*\n    Setup internal slim-redux reducer\n  */\n  function slimReduxReducer(state, action){\n    const actionType = action.type,\n          payload    = action.payload,\n          reducer    = (this.slimReduxChangeTriggers[actionType] ? this.slimReduxChangeTriggers[actionType] : null);\n\n    if(reducer)\n      return reducer(...payload, state);\n    else\n      return state;\n\n  }\n\n  // Inject internal reducer\n  const enhancedRootReducer = reduceReducers(rootReducer, slimReduxReducer.bind(store));\n  store.replaceReducer(enhancedRootReducer);\n\n  // Register store instance in global namespace if not turned off\n  if(!slimReduxOptions.disableGlobalStore)\n    window.store = store;\n\n  return store;\n}\n","import { error as _err, getType, isString, isFunction, isObject, isSet, getFuncParamNames } from './util';\n\nexport function changeTrigger(actionType, reducer){\n  const error = msg => _err('createSlimReduxStore()', msg);\n\n  /*\n    Check input parameters, make it incredibly tight against faulty use\n  */\n  if(arguments.length > 2)\n    error(`Only two arguments allowed, got ${arguments.length}: \\n ${JSON.stringify(arguments, null, 2)}`);\n\n    if(actionType === undefined || actionType === null || actionType.replace(/\\s/g, '') === '')\n      error(`\"actionType\" (first argument) cannot be empty, null, undefined or only contain whitespace: \\n ${JSON.stringify(arguments, null, 2)}`);\n\n  if(!isString(actionType))\n    error(`\"actionType\" (first argument) needs to be of type String, got ${getType(actionType)} instead: \\n ${JSON.stringify(arguments, null, 2)}`);\n\n  if(!isSet(reducer))\n    error(`\"reducer\" (second argument) cannot be undefined or null: \\n ${JSON.stringify(arguments, null, 2)}`)\n\n  if(!isFunction(reducer))\n    error(`\"reducer\" (second argument) needs to be of type Function, got ${getType(actionType)} instead: \\n ${JSON.stringify(arguments, null, 2)}`);\n\n  if(getFuncParamNames(reducer).length === 0)\n    error(`\"reducer\" (second argument) needs to be a function with at least one argument (state) \\n ${JSON.stringify(arguments, null, 2)}`);\n\n\n  /*\n    Setup all the things the change trigger function needs inside a closure (ct = change trigger)\n  */\n  const ctActionType            = actionType,\n        ctReducerFunc           = reducer,\n        ctReducerArgumentsCount = ctReducerFunc.length,   // Rename this to payload arguments count?\n        ctReducerArgumentsNames = getFuncParamNames(ctReducerFunc),\n        ctError                 = msg => _err(`${ctActionType} change trigger function`, msg);\n  var   ctRegistered            = false,\n        storeParam              = null;\n\n  function changeTriggerFunction(...parameters){\n    /*\n      Check parameters\n    */\n\n    // Check for the 'slimReduxOptions' key in the last argument to assess whether it's a slim-redux store\n    const lastArg = parameters[parameters.length - 1];\n\n    if(parameters.length > 0)\n      storeParam = (isObject(lastArg) && 'slimReduxOptions' in lastArg ? lastArg : null);\n    else\n      storeParam = null;\n\n    // Get store either from the parameters, the global scope (if setup) or throw an error\n    const store = storeParam || window.store;\n\n    if(!isSet(store))\n      ctError(`Cannot find slim-redux store instance in arguments (last parameter) of change trigger or in window.store (global scope, set by createSlimReduxStore()). If set the (disableGlobalStore: true) option in createSlimReduxStore(), make sure to pass in the desired slim-redux store instance as the last argument in every change trigger call`);\n\n    // If last argument is not a slim-redux store instance, max. amount of arguments can be one less than the reducer func. had\n    if(storeParam === null && parameters.length > ctReducerArgumentsCount - 1)\n      ctError(`Last argument doesn't seem to be slim-redux store instance, thus max. allowed arguments: ${ctReducerArgumentsCount - 1}, got ${parameters.length} instead: \\n ${JSON.stringify(parameters, null, 2)}`);\n\n    if(storeParam !== null && parameters.length > ctReducerArgumentsCount)\n      ctError(`Last argument seems to be slim-redux store instance, thus max. allowed arguments: ${ctReducerArgumentsCount}, got ${parameters.length} instead: \\n ${JSON.stringify(parameters, null, 2)}`);\n\n    /*\n      Register change trigger in slim-redux reducer, if not done yet\n    */\n    if(!ctRegistered){\n      store.slimReduxChangeTriggers[ctActionType] = ctReducerFunc;\n      ctRegistered = true;\n    }\n\n    /*\n      Prepare action and then dispatch it\n    */\n    var payload = [];\n\n    for(var i=0; i<ctReducerArgumentsCount - 1; i++)\n      payload.push(parameters[i]);\n\n    const action = { type: ctActionType, payload };\n\n    // Dispatch action\n    store.dispatch(action);\n\n    // Return dispatched action and the new state\n    return { action, state: store.getState() };\n  }\n\n  return changeTriggerFunction;\n};\n","import { error as _err, getType, isObject, isEmptyObject, isSet, isFunction, getFuncParamNames, isDuplicateFree, isSlimReduxStore } from './util';\n\nexport function asyncChangeTrigger(changeTriggers, triggerFunction) {\n  const error = msg => _err('asyncChangeTrigger()', msg);\n\n  /*\n    Parameter validation (see tests)\n  */\n  if(arguments.length > 2)\n    error(`Only 2 arguments allowed, ${arguments.length} given: \\n ${JSON.stringify(arguments, null, 2)}`);\n\n  // Check changeTriggers\n  if(!isObject(changeTriggers))\n    error(`\"changeTriggers\" (first argument) needs to be an object, got ${getType(changeTriggers)} instead: \\n ${JSON.stringify(arguments, null, 2)}`);\n\n  if(!isSet(changeTriggers) || isEmptyObject(changeTriggers))\n    error(`\"changeTriggers\" (first argument) cannot be null, empty, or undefined: \\n ${JSON.stringify(arguments, null, 2)}`);\n\n  // Check triggerFunction\n  if(!isFunction(triggerFunction))\n    error(`\"triggerFunction\" (second argument) needs to be a function, got ${getType(triggerFunction)} instead: \\n ${JSON.stringify(arguments, null, 2)}`);\n\n  if(!isSet(triggerFunction))\n    error(`\"triggerFunction\" (second argument) cannot be null or undefined: \\n ${JSON.stringify(arguments, null, 2)}`);\n\n  const argNames = getFuncParamNames(triggerFunction),\n        ctNames  = Object.keys(changeTriggers);\n\n  if(!isDuplicateFree(argNames, ctNames))\n    error(`It looks like you included the names of one or more change triggers in the arguments of your \"triggerFunction\" (second argument). Change triggers can be called from inside the trigger function using this: this.changeTrigger(arguments) \\n ${JSON.stringify(arguments, null, 2)}`);\n\n\n  /*\n    Implementation\n  */\n  const actError           = msg => _err(`Async change trigger function`, msg),\n        actChangeTriggers  = changeTriggers,\n        actTriggerFunction = triggerFunction;\n\n  var storeParam = null;\n\n\n  function asyncChangeTriggerFunction(...parameters){\n      if(parameters.length > 0){\n        const lastArg = parameters[parameters.length - 1];\n        storeParam = (isObject(lastArg) && isSlimReduxStore(lastArg) ? lastArg : null);\n      }\n\n      // Get store either from the parameters, the global scope (if setup) or throw an error\n      const store = storeParam || window.store;\n\n      if(!isSet(store))\n        actError(`Cannot find slim-redux store instance in arguments (last parameter) of async change trigger or in window.store (global scope, set by createSlimReduxStore()). If set the (disableGlobalStore: true) option in createSlimReduxStore(), make sure to pass in the desired slim-redux store instance as the last argument in every change trigger call`);\n\n      // Call triggerFunction w/ store instance, change triggers and the params!\n      actTriggerFunction.apply({ store, ...actChangeTriggers }, ...parameters);\n\n      // TODO: Adapt tests to use this.changeTrigger! Also make sure this even works :) (quick'n'dirty example)\n  }\n\n  return asyncChangeTriggerFunction;\n}\n","import { createSelectorCreator } from 'reselect'\n\n/*\n    Special reselector which can tell us whether the underlying value has actually changed\n*/\nconst defaultEqualityCheck = (a, b) => (a === b);\n\nconst areArgumentsShallowlyEqual = (equalityCheck, prev, next) => {\n  if (prev === null || next === null || prev.length !== next.length) {\n    return false\n  }\n\n  // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n  const length = prev.length\n  for (let i = 0; i < length; i++) {\n    if (!equalityCheck(prev[i], next[i])) {\n      return false\n    }\n  }\n\n  return true\n}\n\nconst defaultMemoize = (func, equalityCheck = defaultEqualityCheck) => {\n  let lastArgs = null\n  let lastResult = null\n  // we reference arguments instead of spreading them for performance reasons\n  return function () {\n    let changed = false\n\n    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\n      // apply arguments instead of spreading for performance.\n      lastResult = func.apply(null, arguments);\n      changed = true\n    }\n\n    lastArgs = arguments\n\n    return {\n      hasChanged: changed,\n      data: lastResult,\n    }\n  }\n}\n\nconst getNotifyingSelectorCreator = () => createSelectorCreator(defaultMemoize);\nconst createNotifyingSelector = getNotifyingSelectorCreator();\n\nexport default createNotifyingSelector;\n","import { error as _err, getType, isObject, isArray, isSet, isString, isSubscriptionStrValid, isFunction, getFuncParamNames, isSlimReduxStore } from './util';\nimport createNotifyingSelector from './notifyingSelector';\n\nexport function calculation(subscriptions, calcFunction, changeCallback, storeArg){\nconst error = msg => _err('calculation()', msg);\n\n  /*\n    Parameter validation (see tests)\n  */\n\n  if(arguments.length > 4)\n    error(`Only four arguments allowed, got ${arguments.length}: \\n ${JSON.stringify(arguments, null, 2)}`);\n\n  // Check subscriptions\n  if(!isArray(subscriptions))\n    error(`\"subscriptions\" (first argument) needs to be of type Array, got \\n ${getType(subscriptions)} instead: \\n ${JSON.stringify(arguments, null, 2)}`);\n\n  if(!isSet(subscriptions) || subscriptions.length === 0)\n    error(`\"subscriptions\" (first argument) cannot be undefined, null, or empty: \\n ${JSON.stringify(arguments, null, 2)}`);\n\n  // Check calcFunction\n  if(!isFunction(calcFunction))\n    error(`\"calcFunction\" (second argument) needs to be a function, got ${getType(actionType)} instead: \\n ${JSON.stringify(arguments, null, 2)}`);\n\n  if(!isSet(calcFunction))\n    error(`\"calcFunction\" (second argument) cannot be undefined or null: \\n ${JSON.stringify(arguments, null, 2)}`);\n\n  if(getFuncParamNames(calcFunction).length !== subscriptions.length)\n    error(`\"calcFunction\" (second argument) needs to have as many parameters as subscriptions in this calculation. The calcFunction() should only rely on the subscriptions for state access. \\n ${JSON.stringify(arguments, null, 2)}`)\n\n  // Check changeCallback\n  if(!isSet(changeCallback))\n    error(`\"changeCallback\" (third argument) cannot be undefined or null:  \\n ${JSON.stringify(arguments, null, 2)}`);\n\n  // Check (optional) store instance\n  if(storeArg && !isSlimReduxStore(storeArg))\n    error(`\"storeArg\" (third argument) is optional, but has to be a slim-redux store instance if provided: \\n${JSON.stringify(arguments, null, 2)}`);\n\n  const store = storeArg || window.store;\n\n  if(!isSet(store))\n    error(`No store instance provided in global and local scope! In case you set \"disableGlobalStore\" when creating slim-redux store, make sure to pass it in as the last argument!\\n ${JSON.stringify(arguments, null, 2)}`);\n\n  if(!isSlimReduxStore(store))\n    error(`Store instance provided is not a slim-redux store! \\n ${JSON.stringify(arguments, null, 2)}`);\n\n  // check subscription strings\n  subscriptions.map((subscription, i) => {\n    if(!isString(subscription))\n      error(`subscriptions need to be of value string, got ${getType(subscription)} for subscriptions[${i}] instead: \\n ${JSON.stringify(arguments, null, 2)}`);\n\n    if(!isSubscriptionStrValid(subscription, store.getState()))\n      error(`Cannot find subscription path '${subscription}'  in state (subscriptions[${i}]). Remember: Subscription strings have to be of the form: \"state.todos.filter\". \\n ${JSON.stringify(store.getState(), null, 2)}`);\n  });\n\n\n  /*\n    Implementation\n  */\n  // Same approach as with subscriptions:\n  // #1: Turn subscriptions into functions\n  const subFunctions = subscriptions.map(subscription => {\n    // Straight up copied from the implementation of subscription()...\n    const getStateFunctionString    = `state => ${subscription}`,   // Syntax for a function: state => subscription-string part of state\n          getStateFunction          = eval(getStateFunctionString); // Turn the string from step one into an actual function\n\n    return getStateFunction;\n  })\n\n  // #2: Create notifying selector (using the subscription functions + calcFunction)\n  const checkCalculationSelector = createNotifyingSelector(\n    ...subFunctions,\n    calcFunction,\n  );\n\n  // Initial firing - initially of course the state has changed!\n  checkCalculationSelector(store.getState());\n\n  // #3: Subscribe that bitch in store.subscribe() and only call changeCallback if it actually changed\n  const unsubscribe = store.subscribe(() => {\n    const state             = store.getState(),\n          subscriptionState = checkCalculationSelector(state);\n\n    if(subscriptionState.hasChanged)\n      changeCallback(subscriptionState.data, state);\n  });\n\n  // All done\n  return unsubscribe;\n}\n","import { error as _err, getType, isString, isFunction, isSet, isEmptyString, isSlimReduxStore, isSubscriptionStrValid } from './util';\nimport createNotifyingSelector from './notifyingSelector';\n\nexport function subscription(subscription, changeCallback, storeArg) {\n  const error = msg => _err('subscription()', msg);\n\n  /*\n    Parameter validation (see tests)\n  */\n  if(arguments.length > 3)\n    error(`Only 3 arguments allowed, ${arguments.length} given: \\n ${JSON.stringify(arguments, null, 2)}`);\n\n  // Check subscription\n  if(!isString(subscription))\n    error(`\"subscription\" (first argument) needs to be a string, got ${getType(subscription)} instead: \\n ${JSON.stringify(arguments, null, 2)}`);\n\n  if(!isSet(subscription) || isEmptyString(subscription))\n    error(`\"subscription\" (first argument) cannot be null, empty, or undefined: \\n ${JSON.stringify(arguments, null, 2)}`);\n\n  // Check changeCallback\n  if(!isFunction(changeCallback))\n    error(`\"changeCallback\" (second argument) needs to be a function, got ${getType(changeCallback)} instead: \\n ${JSON.stringify(arguments, null, 2)}`);\n\n  if(!isSet(changeCallback))\n    error(`\"changeCallback\" (second argument) cannot be null or undefined: \\n ${JSON.stringify(arguments, null, 2)}`);\n\n  // Check (optional) store instance\n  if(storeArg && !isSlimReduxStore(storeArg))\n    error(`\"storeArg\" (third argument) is optional, but has to be a slim-redux store instance if provided: \\n${JSON.stringify(arguments, null, 2)}`);\n\n  const store = storeArg || window.store;\n\n  if(!store)\n    error(`No store instance provided in global and local scope! In case you set \"disableGlobalStore\" when creating slim-redux store, make sure to pass it in as the last argument!\\n ${JSON.stringify(arguments, null, 2)}`);\n\n  if(!isSlimReduxStore(store))\n    error(`Store instance provided is not a slim-redux store! \\n ${JSON.stringify(arguments, null, 2)}`);\n\n  // check subscription string\n  if(!isSubscriptionStrValid(subscription, store.getState()))\n    error(`Cannot find subscription path '${subscription}'  in state. Remember: Subscription strings have to be of the form: \"state.todos.filter\". \\n ${JSON.stringify(store.getState(), null, 2)}`);\n\n  /*\n    Implementation\n  */\n\n  // Step #1: Create a notifying selector out of a function we build using the subscription string\n  const getStateFunctionString    = `state => ${subscription}`,   // Syntax for a function: state => subscription-string part of state\n        getStateFunction          = eval(getStateFunctionString), // Turn the string from step one into an actual function\n        checkSubscriptionSelector = createNotifyingSelector(      // Create subscrption selector using the function we just created\n          getStateFunction,\n          data => data,\n        );\n\n  // Initial firing - initially of course the state has changed!\n  checkSubscriptionSelector(store.getState());\n\n  // Step #2: Subscribe to state changes (native redux API function), but only trigger changeTrigger() when our subscription has changed\n  const unsubscribe = store.subscribe(() => {\n    const state             = store.getState(),\n          subscriptionState = checkSubscriptionSelector(state);\n\n    if(subscriptionState.hasChanged)\n      changeCallback(subscriptionState.data, state);\n  });\n\n  // All done!\n  return unsubscribe;\n}\n"],"names":["error","location","msg","Error","getType","whatever","constructor","isObject","obj","Object","isArray","arr","Array","isString","str","String","isFunction","func","isBoolean","binary","Boolean","isSet","smthg","undefined","isEmptyString","replace","isEmptyObject","length","isSlimReduxStore","slimReduxOptions","STRIP_COMMENTS","ARGUMENT_NAMES","getFuncParamNames","fnStr","toString","result","slice","indexOf","match","isSubscriptionStrValid","state","subStringParts","split","statePointer","i","nextPart","hasOwnProperty","isDuplicateFree","a","b","intersection","createSlimReduxStore","initialState","options","_err","window","global","defaultReducer","registerChangeTrigger","rootReducer","middleware","slimReduxChangeTriggers","arguments","optionKeys","name","option","disableActionDispatch","disableGlobalStore","store","createStore","slimReduxReducer","action","actionType","type","payload","reducer","enhancedRootReducer","reduceReducers","bind","replaceReducer","changeTrigger","ctActionType","ctReducerFunc","ctReducerArgumentsCount","ctError","ctRegistered","storeParam","changeTriggerFunction","parameters","lastArg","push","dispatch","getState","asyncChangeTrigger","changeTriggers","triggerFunction","argNames","ctNames","actError","actChangeTriggers","actTriggerFunction","asyncChangeTriggerFunction","apply","defaultEqualityCheck","areArgumentsShallowlyEqual","equalityCheck","prev","next","defaultMemoize","lastArgs","lastResult","changed","getNotifyingSelectorCreator","createSelectorCreator","createNotifyingSelector","calculation","subscriptions","calcFunction","changeCallback","storeArg","map","subscription","subFunctions","getStateFunctionString","eval","getStateFunction","checkCalculationSelector","unsubscribe","subscribe","subscriptionState","hasChanged","data","checkSubscriptionSelector"],"mappings":"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"}