{"version":3,"file":null,"sources":["../src/slimRedux.js"],"sourcesContent":["import { createStore } from 'redux';\nimport reduceReducers from 'reduce-reducers';\n\n/*\n  (INTERNAL) The slim redux reducer which automatically gets injected into the store instance\n  in createSlimReduxStore().\n*/\nfunction slimReduxReducer(state, action){\n  const actionType = action.type,\n        payload    = action.payload,\n        store      = this,\n        reducer    = (store.slimRedux.changeTriggers[actionType] ? store.slimRedux.changeTriggers[actionType].reducer : null);\n\n  if(reducer)\n    return reducer(state, payload, action);\n  else\n    return state;\n}\n\n/*\n  (INTERNAL) Performs the payload validation when a change trigger function is called\n  for which a payload validation function was provided.\n*/\nfunction performPayloadValidation(actionType, actionPayload) {\n  const accept    = function() { return {type: 'accept'} },\n        reject    = function(msg = '') { return {type: 'reject', payload: msg} },\n        store     = this,\n        validator = store.slimRedux.changeTriggers[actionType].payloadValidation;\n\n  // If payloadValidation() function was registered for this change trigger: Perform validation, otherwise just return 'accept'\n  if(validator)\n    return validator(actionPayload, accept, reject);\n  else\n    return {type: 'accept'}\n}\n\n/*\n  Creates a change trigger for the given parameters object. This function is\n  injected into the store instance through `createSlimReduxStore()`, so please use this\n  by calling `store.createChangeTrigger()`.\n\n  Returns a change trigger function which takes an object (= action payload) and will\n  run the `payloadValidation` function (if provided) before dispatching and action to\n  reducers (if validation passed) or an error action (if validation failed).\n\n  The action trigger function when called will return an object specifying the validation results:\n  `{type: 'accept'}` if validation has passed or no payload validation was provided,\n  `{type: 'reject', payload: {...}}` if validation failed (payload is additional error information).\n\n  **Parameters:**\n  - *parameters.actionType*: The type of action this change trigger function will dispatch (e.g. 'ADD_TODO')\n  - *parameters.reducer*: The reducer to process action of this action type (can also be from external redux code). Signature: (state, payload, [action]) --> new state\n  - *parameters.payloadValidation (optional)*: A callback function with the signature ({payload}, accept, reject) --> return reject({error payload}) / return accept() (see examples!)\n\n  **Returns:** A change trigger function with the signature ({actionPayload}) --> {type: 'accept'} / {type: 'reject', payload: {...}}\n\n  **Example:**\n  ```javascript\n  import { createSlimReduxStore } from 'slim-redux';\n\n  // Create a store with initial state\n  var store = createSlimReduxStore(0);\n\n  // Make sure we see any store changes in the console\n  store.subscribe(() =>\n    console.log(store.getState())\n  )\n\n  // create the change trigger for the action type 'INCREMENT'\n  const increment = store.createChangeTrigger({\n    actionType: 'INCREMENT',\n    reducer: (state, payload, action) => {\n      const value = payload.value || 1;\n      return state + value;\n    }\n  });\n\n  // Trigger a store-change - that is: Dispatch the action:\n  // {type: 'INCREMENT', payload: {value: 10}}\n  increment({value: 10});\n  increment({value: 23});\n  ```\n*/\nfunction createChangeTrigger(parameters) {\n  const actionType        = parameters.actionType,\n        reducer           = parameters.reducer,\n        payloadValidation = parameters.payloadValidation || null,\n        store             = this;\n\n  // TODO: Insert parameters validation here! (to ensure correct usage of createChangeTrigger())\n  store.slimRedux.changeTriggers[actionType] = {reducer, payloadValidation};\n\n  // Return the change trigger function which is bound to the store instance as well\n  return (actionPayload) => {\n    const store      = this,\n          validation = store.performPayloadValidation(actionType, actionPayload);\n\n    if(validation.type === 'accept'){\n      // If payload validation was successful, dispatch the action to the reducers\n      store.dispatch({\n        type: actionType,\n        payload: actionPayload,\n      });\n\n      return validation;\n    } else {\n      // If payload validation was not successful: Trigger error action!\n      store.dispatch({\n        type: actionType,\n        error: true,\n        payload: validation.payload,\n      });\n\n      return validation;\n    }\n  }\n}\n\n/*\n  Creates and returns a redux store which is a regular redux store with the slim-redux\n  functionality (the `store.createChangeTrigger()` function + some internal stuff) injected.\n\n  Since all the slim-redux functionality is directly injected into the store instance,\n  slim-redux is suitable for server side rendering:\n  http://redux.js.org/docs/recipes/ServerRendering.html\n\n  **Parameters:**\n  - *initialState*: The initial state of the redux store.\n  - *existingRootReducer (optional)*: Root reducer of already existing redux setup\n  - *enhancer (optional)*: Your regular middleware magic that you would normally pass to createStore() (in redux)\n\n  **Returns:** A fresh store with some slim-redux functionality injected (mainly: `store.createChangeTrigger()`)\n\n  **Example:**\n  ```javascript\n  import { createSlimReduxStore } from 'slim-redux';\n\n  // Create a store with initial counter state = 0\n  // This automatically injects the create slim-redux reducer and exposes store.createChangeTrigger()\n  var store = createSlimReduxStore(0);\n\n  // store is a regular redux store with slim-redux, you can subscribe to it like to a regular redux store:\n  store.subscribe(() =>\n    console.log(store.getState())\n  )\n\n  // With slim-redux initialized you can then go ahead and register change triggers...\n  const increment = store.createChangeTrigger({ ... });\n\n  // And use them to make state modifications\n  increment({value: 10});\n  ```\n*/\nexport function createSlimReduxStore(initialState, existingRootReducer, enhancer) {\n  const defaultExistingReducer = state => state,\n        rootReducer            = existingRootReducer || defaultExistingReducer;\n\n  var store = createStore(rootReducer, initialState, enhancer);\n\n  // Inject slimRedux related stuff into the store\n  store.createChangeTrigger      = createChangeTrigger;\n  store.performPayloadValidation = performPayloadValidation;\n  store.slimReduxReducer         = slimReduxReducer;\n  store.slimRedux                = {changeTriggers: {}};\n\n  // Inject the slimReduxReducer into the store\n  const enhancedRootReducer = reduceReducers(rootReducer, (state, action) => store.slimReduxReducer(state, action));\n  store.replaceReducer(enhancedRootReducer);\n\n  return store;\n}\n"],"names":["slimReduxReducer","state","action","actionType","type","payload","store","reducer","slimRedux","changeTriggers","performPayloadValidation","actionPayload","accept","reject","msg","validator","payloadValidation","createChangeTrigger","parameters","validation","dispatch","createSlimReduxStore","initialState","existingRootReducer","enhancer","defaultExistingReducer","rootReducer","createStore","enhancedRootReducer","reduceReducers","replaceReducer"],"mappings":";;;;;;;;AAGA;;;;AAIA,SAASA,gBAAT,CAA0BC,KAA1B,EAAiCC,MAAjC,EAAwC;MAChCC,aAAaD,OAAOE,IAA1B;MACMC,UAAaH,OAAOG,OAD1B;MAEMC,QAAa,IAFnB;MAGMC,UAAcD,MAAME,SAAN,CAAgBC,cAAhB,CAA+BN,UAA/B,IAA6CG,MAAME,SAAN,CAAgBC,cAAhB,CAA+BN,UAA/B,EAA2CI,OAAxF,GAAkG,IAHtH;;MAKGA,OAAH,EACE,OAAOA,QAAQN,KAAR,EAAeI,OAAf,EAAwBH,MAAxB,CAAP,CADF,KAGE,OAAOD,KAAP;;;;;;;AAOJ,SAASS,wBAAT,CAAkCP,UAAlC,EAA8CQ,aAA9C,EAA6D;MACrDC,SAAY,SAAZA,MAAY,GAAW;WAAS,EAACR,MAAM,QAAP,EAAP;GAA/B;MACMS,SAAY,SAAZA,MAAY,GAAmB;QAAVC,GAAU,uEAAJ,EAAI;WAAS,EAACV,MAAM,QAAP,EAAiBC,SAASS,GAA1B,EAAP;GADvC;MAEMR,QAAY,IAFlB;MAGMS,YAAYT,MAAME,SAAN,CAAgBC,cAAhB,CAA+BN,UAA/B,EAA2Ca,iBAH7D;;;MAMGD,SAAH,EACE,OAAOA,UAAUJ,aAAV,EAAyBC,MAAzB,EAAiCC,MAAjC,CAAP,CADF,KAGE,OAAO,EAACT,MAAM,QAAP,EAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDJ,SAASa,mBAAT,CAA6BC,UAA7B,EAAyC;;;MACjCf,aAAoBe,WAAWf,UAArC;MACMI,UAAoBW,WAAWX,OADrC;MAEMS,oBAAoBE,WAAWF,iBAAX,IAAgC,IAF1D;MAGMV,QAAoB,IAH1B;;;QAMME,SAAN,CAAgBC,cAAhB,CAA+BN,UAA/B,IAA6C,EAACI,gBAAD,EAAUS,oCAAV,EAA7C;;;SAGO,UAACL,aAAD,EAAmB;QAClBL,aAAN;QACMa,aAAab,MAAMI,wBAAN,CAA+BP,UAA/B,EAA2CQ,aAA3C,CADnB;;QAGGQ,WAAWf,IAAX,KAAoB,QAAvB,EAAgC;;YAExBgB,QAAN,CAAe;cACPjB,UADO;iBAEJQ;OAFX;;aAKOQ,UAAP;KAPF,MAQO;;YAECC,QAAN,CAAe;cACPjB,UADO;eAEN,IAFM;iBAGJgB,WAAWd;OAHtB;;aAMOc,UAAP;;GApBJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DF,AAAO,SAASE,oBAAT,CAA8BC,YAA9B,EAA4CC,mBAA5C,EAAiEC,QAAjE,EAA2E;MAC1EC,yBAAyB,SAAzBA,sBAAyB;WAASxB,KAAT;GAA/B;MACMyB,cAAyBH,uBAAuBE,sBADtD;;MAGInB,QAAQqB,kBAAYD,WAAZ,EAAyBJ,YAAzB,EAAuCE,QAAvC,CAAZ;;;QAGMP,mBAAN,GAAiCA,mBAAjC;QACMP,wBAAN,GAAiCA,wBAAjC;QACMV,gBAAN,GAAiCA,gBAAjC;QACMQ,SAAN,GAAiC,EAACC,gBAAgB,EAAjB,EAAjC;;;MAGMmB,sBAAsBC,eAAeH,WAAf,EAA4B,UAACzB,KAAD,EAAQC,MAAR;WAAmBI,MAAMN,gBAAN,CAAuBC,KAAvB,EAA8BC,MAA9B,CAAnB;GAA5B,CAA5B;QACM4B,cAAN,CAAqBF,mBAArB;;SAEOtB,KAAP;;;;;;;"}